"use client"
import InlineVideoPlayer from "@/components/InlineVideoPlayer"

import { useState, useEffect, useRef } from "react"
import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { Toaster } from "@/components/ui/toaster"
import { useToast } from "@/hooks/use-toast"
import { Video, Github, Check, Loader2, Plus, X, Send, ArrowLeft, Info, BookOpen, TrendingUp, Lightbulb } from 'lucide-react'
import ReactMarkdown from 'react-markdown'
import remarkGfm from 'remark-gfm'
import { Label } from "@/components/ui/label"
import { API_CONFIG, APP_CONFIG, ERROR_MESSAGES, validateApiKey, validateVideoFile, formatDuration, formatFileSize } from "@/lib/config"

type IndexItem = { id: string; name: string }
type VideoItem = { 
  id: string; 
  name: string; 
  duration: number; 
  thumbnail_url?: string; 
  video_url?: string;
  width?: number;
  height?: number;
  fps?: number;
  size?: number;
}

type Source = {
  title: string
  url: string
  description: string
  isReal: boolean
  timestamp: Date
  queryContext?: string
  messageId?: string
}

// Component to display website favicon/OG image
function SourceIcon({ url, title }: { url: string; title: string }) {
  const [iconUrl, setIconUrl] = useState<string | null>(null)
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    const fetchIcon = async () => {
      try {
        // Extract domain from URL
        const domain = new URL(url).hostname
        
        // Try multiple favicon sources
        const faviconUrls = [
          `https://www.google.com/s2/favicons?domain=${domain}&sz=32`,
          `https://favicons.githubusercontent.com/${domain}`,
          `https://${domain}/favicon.ico`,
          `https://${domain}/apple-touch-icon.png`,
          `https://${domain}/favicon-32x32.png`,
          `https://${domain}/favicon-16x16.png`
        ]

        // Try each favicon URL
        for (const faviconUrl of faviconUrls) {
          try {
            const img = new Image()
            img.onload = () => {
              setIconUrl(faviconUrl)
              setIsLoading(false)
            }




            img.onerror = () => {
              // Continue to next URL
            }
            img.src = faviconUrl
            
            // Give it a moment to load
            await new Promise(resolve => setTimeout(resolve, 100))
            if (iconUrl) break
            
          } catch (error) {
            // Continue to next URL
          }
        }
        
        // If no favicon found, set loading to false
        setTimeout(() => setIsLoading(false), 1000)
        
      } catch (error) {
        setIsLoading(false)
      }
    }

    if (url) {
      fetchIcon()
    }
  }, [url])

  if (isLoading) {
    return (
      <div className="w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center flex-shrink-0 animate-pulse">
        <div className="w-4 h-4 bg-gray-300 rounded"></div>
      </div>
    )
  }

  if (iconUrl) {
    return (
      <div className="w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 overflow-hidden">
        <img 
          src={iconUrl} 
          alt={`${title} favicon`}
          className="w-6 h-6 rounded-sm object-cover"
          onError={() => {
            // Fallback to default icon if image fails to load
            setIconUrl(null)
          }}
        />
      </div>
    )
  }

  // Fallback to default link icon
  return (
    <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0">
      <svg className="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
      </svg>
    </div>
  )
}

// Component to display video thumbnail with fallback
function VideoThumbnail({ src, alt, className = "w-8 h-8" }: { src?: string; alt: string; className?: string }) {
  const [imageError, setImageError] = useState(false)
  const [imageLoaded, setImageLoaded] = useState(false)

  if (!src || imageError) {
    return (
      <div className={`${className} bg-gray-200 rounded flex items-center justify-center flex-shrink-0`}>
        <Video className="w-4 h-4 text-gray-500" />
      </div>
    )
  }

  return (
    <img 
      src={src} 
      alt={alt} 
      className={`${className} object-cover rounded transition-opacity duration-200 ${imageLoaded ? 'opacity-100' : 'opacity-0'}`}
      onLoad={() => setImageLoaded(true)}
      onError={() => setImageError(true)}
    />
  )
}

// Logo component using static image
function Logo({ className = "w-12 h-12" }: { className?: string }) {
  return (
    <img 
      src="/logo-tl.png" 
      alt="Video Deep Research Logo" 
      className={`${className} object-contain`}
    />
  )
}

// Inside the DeepResearchLanding component, before the return statement
const AnimatedGif = ({ className }: { className?: string }) => {
  const imgRef = useRef<HTMLImageElement>(null);

  useEffect(() => {
    const reloadGif = () => {
      if (imgRef.current) {
        imgRef.current.src = '/Twelve Labs.gif?' + Date.now();
      }
    };

    // Initial load only - remove the continuous reloading interval
    reloadGif();

    // Remove the interval that was causing periodic refreshes
    // const interval = setInterval(reloadGif, 3000);
    // return () => clearInterval(interval);
  }, []);

  return (
    <img 
      ref={imgRef}
      alt="TwelveLabs"
      className={`w-8 h-8 object-contain ${className || ''}`}
      style={{
        opacity: 0,
        transition: 'opacity 0.2s ease-in'
      }}
      onLoad={(e) => {
        const img = e.target as HTMLImageElement;
        img.style.opacity = '1';
      }}
    />
  );
};

// Convert numeric citations like [1], [2] into hyperlinks to the corresponding sources
function linkifyReferences(markdown: string, sources?: Source[]): string {
  if (!markdown || !sources || sources.length === 0) return markdown
  // Replace standalone [n] that are not already links ([n](...))
  return markdown.replace(/\[(\d+)\](?!\()/g, (match, num) => {
    const index = parseInt(num, 10) - 1
    const src = sources[index]
    if (src && src.url) {
      return `[\\[${num}\\]](${src.url})`
    }
    return match
  })
}

export default function DeepResearchLanding() {
  const { toast } = useToast()

  const [isApiModalOpen, setIsApiModalOpen] = useState(false)
  const [isComingSoonOpen, setIsComingSoonOpen] = useState(false)
  const [isUploadVideoModalOpen, setIsUploadVideoModalOpen] = useState(false)
  const [isInfoModalOpen, setIsInfoModalOpen] = useState(false)
  const [isBlogModalOpen, setIsBlogModalOpen] = useState(false)
  const [currentInfoStep, setCurrentInfoStep] = useState(0)
  
  const infoSteps = [
    {
      title: "Demo of Video Deep Research",
      content: (
        <div className="text-center">
          <div className="mb-6">
            <div className="w-full h-64 bg-gray-100 border-2 border-black overflow-hidden" style={{ borderRadius: '58px' }}>
              <img 
                src="/1_Demo.gif" 
                alt="Video Deep Research Demo"
                className="w-full h-full object-cover"
                style={{ borderRadius: '56px' }}
              />
            </div>
          </div>
          <h3 className="text-xl font-semibold text-black mb-3">Welcome to Video Deep Research</h3>
          <p className="text-black text-lg">
            Experience the power of TwelveLabs powered research from video content.
            Get up-to-date insights and reliable sources.
          </p>
        </div>
      )
    },
    {
      title: "Upload Videos to TwelveLabs",
      content: (
        <div className="text-center">
          <div className="mb-6">
            <div className="w-full h-64 bg-gray-100 border-2 border-black overflow-hidden" style={{ borderRadius: '58px' }}>
              <img 
                src="/2_Upload_Video.gif" 
                alt="Upload Video to TwelveLabs"
                className="w-full h-full object-cover"
                style={{ borderRadius: '56px' }}
              />
            </div>
          </div>
          <h3 className="text-xl font-semibold text-black mb-3">Upload Your Videos</h3>
          <p className="text-black text-lg">
            You can upload your videos in the TwelveLabs Platform.<br />
            Access them here with your TwelveLabs API KEY.
          </p>
        </div>
      )
    },
    {
      title: "Connect API Key",
      content: (
        <div className="text-center">
          <div className="mb-6">
            <div className="w-full h-64 bg-gray-100 border-2 border-black overflow-hidden" style={{ borderRadius: '58px' }}>
              <img 
                src="/3_API_Connect.gif" 
                alt="Connect API Key"
                className="w-full h-full object-cover"
                style={{ borderRadius: '56px' }}
              />
            </div>
          </div>
          <h3 className="text-xl font-semibold text-black mb-3">Connect Your API Key</h3>
          <p className="text-black text-lg">
            Experiment with Default Sample videos or connect your own API KEY.
            Get research insights with your personal video collection.
          </p>
        </div>
      )
    },
    {
      title: "Upload & Index Videos",
      content: (
        <div className="text-center">
          <div className="mb-6">
            <div className="w-full h-64 bg-gray-100 border-2 border-black overflow-hidden" style={{ borderRadius: '58px' }}>
              <img 
                src="/4_Indexing.gif" 
                alt="Video Indexing"
                className="w-full h-full object-cover"
                style={{ borderRadius: '56px' }}
              />
            </div>
          </div>
          <h3 className="text-xl font-semibold text-black mb-3">Upload & Index Videos</h3>
          <p className="text-black text-lg">
            Upload video and do Indexing here itself.<br />
            Works without connecting your API KEY, using default mode.
          </p>
        </div>
      )
    },
    {
      title: "Explore & Experiment",
      content: (
        <div className="text-center">
          <div className="mb-6">
            <div className="w-full h-64 bg-gray-100 border-2 border-black overflow-hidden" style={{ borderRadius: '58px' }}>
              <img 
                src="/5_High_Reasoning.gif" 
                alt="High Reasoning Research"
                className="w-full h-full object-cover"
                style={{ borderRadius: '56px' }}
              />
            </div>
          </div>
          <h3 className="text-xl font-semibold text-black mb-3">Explore & Experiment</h3>
                      <p className="text-black text-lg">
              Check out the <a 
                href="https://github.com/Hrishikesh332/TwelveLabs-Video-DeepResearch" 
                target="_blank" 
                rel="noopener noreferrer"
                className="text-blue-600 hover:text-blue-800 underline font-medium"
              >
                GitHub repository
              </a> and keep experimenting.<br />
              Discover advanced video understanding capabilities and features.
            </p>
        </div>
      )
    }
  ];

  const nextStep = () => {
    if (currentInfoStep < infoSteps.length - 1) {
      setCurrentInfoStep(currentInfoStep + 1)
    }
  }

  const prevStep = () => {
    if (currentInfoStep > 0) {
      setCurrentInfoStep(currentInfoStep - 1)
    }
  }

  const closeModal = () => {
    setIsInfoModalOpen(false)
    setCurrentInfoStep(0)
  }

  const [apiKey, setApiKey] = useState("")
  const [isConnecting, setIsConnecting] = useState(false)
  const [isConnected, setIsConnected] = useState(false)
  const [isUsingEnvKey, setIsUsingEnvKey] = useState(false)
  const [justConnected, setJustConnected] = useState(false)

  const [indexes, setIndexes] = useState<IndexItem[]>([])
  const [videos, setVideos] = useState<VideoItem[]>([])
  const [selectedIndex, setSelectedIndex] = useState("")
  const [selectedVideo, setSelectedVideo] = useState("")
  const [selectedVideoThumbnail, setSelectedVideoThumbnail] = useState<string | null>(null)
  const [selectedVideoUrl, setSelectedVideoUrl] = useState<string | null>(null)
  const [isLoadingVideos, setIsLoadingVideos] = useState(false)

  const [prompt, setPrompt] = useState("")

  const [isResearching, setIsResearching] = useState(false)
  const [researchStarted, setResearchStarted] = useState(false)
  const [researchSteps, setResearchSteps] = useState<Array<{
    step: string
    status: 'pending' | 'in-progress' | 'completed' | 'error'
    message: string
    timestamp: Date
  }>>([])
  const [streamingContent, setStreamingContent] = useState("")
  const [currentStep, setCurrentStep] = useState("")
  const [currentStepDetail, setCurrentStepDetail] = useState("")
  const [sources, setSources] = useState<Source[]>([])
  
  // Research context for follow-up questions
  const [researchContext, setResearchContext] = useState<{
    twelvelabsAnalysis: string
    sonarResponse: string
    videoDetails: any
    originalQuery: string
  } | null>(null)
  
  // Chat state
  const [chatInput, setChatInput] = useState("")
  const [chatMessages, setChatMessages] = useState<Array<{
    id: string
    type: 'user' | 'assistant'
    content: string
    timestamp: Date
    sources?: Source[]
  }>>([])
  const [isSendingMessage, setIsSendingMessage] = useState(false)
  const [showActivitySidebar, setShowActivitySidebar] = useState(false)
  const [activeTab, setActiveTab] = useState<'activity' | 'sources'>('activity')
  const [activityLogs, setActivityLogs] = useState<Array<{
    message: string
    timestamp: Date
    type: 'info' | 'progress' | 'complete' | 'error'
  }>>([])
  const [uploadFile, setUploadFile] = useState<File | null>(null)
  const [isUploading, setIsUploading] = useState(false)
  const [uploadStep, setUploadStep] = useState<0 | 1>(0)
  const [isSettingUpDefault, setIsSettingUpDefault] = useState(false)

  // Auto-load data from environment API key on component mount
  useEffect(() => {
    const loadDataFromEnv = async () => {
      try {
        const res = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.TWELVELABS.INDEXES}`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({}),
        })
        if (res.ok) {
          const data = await res.json()
          if (data?.success && Array.isArray(data.indexes)) {
            setIndexes(data.indexes)
            setIsConnected(true)
            setIsUsingEnvKey(true)  // Mark as using environment key
            if (data.indexes.length > 0) {
              const firstId = data.indexes[0].id
              setSelectedIndex(firstId)
              // Add small delay to ensure state updates are complete
              setTimeout(async () => {
                // Pass null API key and true env flag to use environment key
                await handleIndexChange(firstId, null, true)
              }, 50)
            }
          }
        }
      } catch (error) {
        console.log("No environment API key available")
      }
    }
    loadDataFromEnv()
  }, [])
  function handleConnect(e?: React.FormEvent) {
    e?.preventDefault?.()
    
    if (!apiKey.trim()) {
      toast({ title: "API key required", description: "Please enter your TwelveLabs API key." })
      return
    }
    
    // Validate API key format
    if (!apiKey.trim().startsWith('tlk_')) {
      toast({ 
        title: "Invalid API key format", 
        description: "Please provide a correct TwelveLabs API key." 
      })
      return
    }
    
    setIsConnecting(true)
    
    ;(async () => {
      try {
        const res = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.TWELVELABS.CONFIG}`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ api_key: apiKey }),
        })
        
        const data = await res.json().catch(() => ({} as any))

        if (!res.ok || !data?.success) {
          const msg = data?.error || `Request failed with status ${res.status}`
          throw new Error(msg)
        }

        // On success: store indexes, mark connected, pulse the tick, and auto-load first index's videos.
        const returnedIndexes = Array.isArray(data.indexes) ? data.indexes : []
        
        setIndexes(returnedIndexes)
        setIsConnected(true)
        setIsUsingEnvKey(false)  // Mark as using UI key, not environment key
        setIsApiModalOpen(false)
        setJustConnected(true)
        setTimeout(() => setJustConnected(false), 1200)

        if (returnedIndexes.length > 0) {
          const firstId = returnedIndexes[0].id

          setSelectedIndex(firstId)
          // Add small delay to ensure state updates are complete
          setTimeout(async () => {
            // Pass the current API key and env flag to ensure correct API context
            await handleIndexChange(firstId, apiKey, false)
          }, 50)
        }

        toast({ title: "Connected", description: data?.message || "TwelveLabs API key configured successfully." })
      } catch (err: unknown) {
        const message = err instanceof Error ? err.message : "Invalid API key: Failed to fetch indexes"
        toast({ title: "Connection failed", description: message })
      } finally {
        setIsConnecting(false)
      }
    })()
  }

  async function handleUseDefault() {
    setIsSettingUpDefault(true)
    try {
      // Clear any custom API key from the backend
      await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.TWELVELABS.CONFIG}`, {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' }
      })
      
      // Load data using environment API key
      const res = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.TWELVELABS.INDEXES}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({}),
      })

      if (res.ok) {
        const data = await res.json()
        if (data?.success && Array.isArray(data.indexes)) {
          setIndexes(data.indexes)
          setIsConnected(true)
          setIsUsingEnvKey(true)  // Mark as using environment key
          setApiKey('')  // Clear the custom API key
          setIsApiModalOpen(false)
          
          if (data.indexes.length > 0) {
            const firstId = data.indexes[0].id
            setSelectedIndex(firstId)
            // Add small delay to ensure state updates are complete
            setTimeout(async () => {
              // Pass null API key and true env flag to use environment key
              await handleIndexChange(firstId, null, true)
            }, 50)
          }
          
          toast({ 
            title: 'Using Default Key', 
            description: 'Successfully switched to environment API key.' 
          })
          return
        }
      }
      
      // If we get here, either response wasn't ok or data wasn't valid
      // Just log it like we do in initial loading
      console.log("No environment API key available")
      
      // Reset state but don't show error
      setIsConnected(false)
      setIsUsingEnvKey(false)
      setApiKey('')
      setIndexes([])
      setVideos([])
      setSelectedIndex('')
      setSelectedVideo('')
      setSelectedVideoThumbnail(null)
      setSelectedVideoUrl(null)
      setIsApiModalOpen(true)  // Open modal for custom key input
      
    } catch (error) {
      console.log("No environment API key available")
      // Reset state but don't show error
      setIsConnected(false)
      setIsUsingEnvKey(false)
      setApiKey('')
      setIndexes([])
      setVideos([])
      setSelectedIndex('')
      setSelectedVideo('')
      setSelectedVideoThumbnail(null)
      setSelectedVideoUrl(null)
      setIsApiModalOpen(true)  // Open modal for custom key input
    } finally {
      setIsSettingUpDefault(false)
    }
  }

  // Function to load data using environment API key
  const loadDataFromEnv = async () => {
    try {
      const res = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.TWELVELABS.INDEXES}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({}),
      })
      if (res.ok) {
        const data = await res.json()
        if (data?.success && Array.isArray(data.indexes)) {
          setIndexes(data.indexes)
          setIsConnected(true)
          setIsUsingEnvKey(true)  // Mark as using environment key
          if (data.indexes.length > 0) {
            const firstId = data.indexes[0].id
            setSelectedIndex(firstId)
            // Add small delay to ensure state updates are complete
            setTimeout(async () => {
              // Pass null API key and true env flag to use environment key
              await handleIndexChange(firstId, null, true)
            }, 50)
          }
          return true
        }
      }
      return false
    } catch (error) {
      console.log("No environment API key available")
      return false
    }
  }

  // Auto-load data from environment API key on component mount
  useEffect(() => {
    loadDataFromEnv()
  }, [])



  async function switchToEnvironmentKey() {
    try {
      // Store current selections to preserve them
      const currentIndexId = selectedIndex
      const currentVideoId = selectedVideo
      
      // First clear any custom API key from the backend
      await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.TWELVELABS.CONFIG}`, {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' }
      })

      // Clear the custom API key from UI
      setApiKey('')

      // Now load data using environment key - exactly like initial load
      const res = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.TWELVELABS.INDEXES}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({})  // Empty body means use backend's env key
      })

      if (res.ok) {
        const data = await res.json()
        if (data?.success && Array.isArray(data.indexes)) {
          // Set up exactly like initial load
          setIndexes(data.indexes)
          setIsConnected(true)
          setIsUsingEnvKey(true)
          setIsApiModalOpen(false)
          
          if (data.indexes.length > 0) {
            // Try to preserve current index if it exists in the new list, otherwise use first
            const targetIndexId = currentIndexId && data.indexes.some((idx: any) => idx.id === currentIndexId) 
              ? currentIndexId 
              : data.indexes[0].id
            
            setSelectedIndex(targetIndexId)
            
            // Add small delay to ensure state updates are complete
            setTimeout(async () => {
              // Pass null API key and true env flag to use environment key
              await handleIndexChange(targetIndexId, null, true)
              
              // If we had a video selected and we're staying on the same index, try to restore it
              if (currentVideoId && targetIndexId === currentIndexId) {
                // The handleIndexChange will try to preserve the video selection
                // No additional action needed here
              }
            }, 50)
          }
        }
      }
    } catch (error) {
      console.log("No environment API key available")
    }
  }
  async function handleIndexChange(indexId: string, overrideApiKey?: string | null, overrideUseEnvKey?: boolean) {
    const isChangingIndex = selectedIndex !== indexId
    
    setSelectedIndex(indexId)
    
    // Only reset video selection if we're actually changing to a different index
    if (isChangingIndex) {
    setSelectedVideo("")
    setSelectedVideoThumbnail(null)
    setSelectedVideoUrl(null)
    setVideos([])
    }
    
    if (!indexId) return

    setIsLoadingVideos(true)
    try {
      // Use override values if provided, otherwise use current state
      const useEnvKey = overrideUseEnvKey !== undefined ? overrideUseEnvKey : isUsingEnvKey
      const currentApiKey = overrideApiKey !== undefined ? overrideApiKey : apiKey
      

      
      const res = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.TWELVELABS.VIDEOS}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ 
          api_key: useEnvKey ? undefined : currentApiKey, 
          index_id: indexId 
        }),
      })

      if (!res.ok) {
        const text = await res.text().catch(() => "")
        throw new Error(text || `Request failed with status ${res.status}`)
      }

      const data = await res.json()
      
      if (data?.success) {
        const videosList = data.videos || []
        setVideos(videosList)
        
        // Only automatically select the first video if we're changing indexes or no video is currently selected
        if (isChangingIndex && videosList.length > 0) {
          const firstVideo = videosList[0]
          setSelectedVideo(firstVideo.id)
          setSelectedVideoThumbnail(firstVideo.thumbnail_url || null)
          setSelectedVideoUrl(firstVideo.video_url || null)
        } else if (!isChangingIndex && selectedVideo) {
          // When refreshing the same index, try to maintain the current selection
          const currentVideo = videosList.find((v: any) => v.id === selectedVideo)
          if (currentVideo) {
            // Update thumbnail and URL in case they changed
            setSelectedVideoThumbnail(currentVideo.thumbnail_url || null)
            setSelectedVideoUrl(currentVideo.video_url || null)
          } else if (videosList.length > 0) {
            // If current video no longer exists, select the first one
          const firstVideo = videosList[0]
          setSelectedVideo(firstVideo.id)
          setSelectedVideoThumbnail(firstVideo.thumbnail_url || null)
          setSelectedVideoUrl(firstVideo.video_url || null)
          }
        }
      } else {
        throw new Error(data?.error || "Could not load videos for this index.")
      }
    } catch (err: unknown) {
      const message = err instanceof Error ? err.message : "Failed to load videos."
      toast({ title: "Error", description: message })
    } finally {
      setIsLoadingVideos(false)
    }
  }

  function addActivityLog(message: string, type: 'info' | 'progress' | 'complete' | 'error' = 'info') {
    setActivityLogs(prev => [...prev, {
      message,
      timestamp: new Date(),
      type
    }])
  }

  // Function to extract real sources from API response
  function extractRealSources(data: any): Source[] {
    if (!data?.sources) return []
    
    // Map the search results to our source format
    return data.sources.map((result: any) => ({
        title: result.title || 'Untitled',
        url: result.url || '#',
      description: result.snippet || result.description || 'No description available',
      isReal: true,
      timestamp: new Date()
    }))
  }

  async function handleStartResearch() {
    if (!canStartResearch) return
    
    setIsResearching(true)
    setResearchStarted(true)
    setResearchSteps([])
    setStreamingContent("")
    setCurrentStep("")
    setCurrentStepDetail("")
    setActivityLogs([])
    setChatMessages([])
    
    // Add initial user message
    setChatMessages([{
      id: `user-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      type: 'user',
      content: prompt,
      timestamp: new Date()
    }])
    
    // Add initial activity log
    addActivityLog(`Starting research on: ${prompt}`, 'info')
    
    try {
      const payload = {
        twelvelabs_api_key: isUsingEnvKey ? undefined : apiKey,
        index_id: selectedIndex,
        video_id: selectedVideo,
        analysis_prompt: prompt.trim(),
        research_query: prompt.trim()
      }
      
      const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.RESEARCH.WORKFLOW}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload)
      })
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const reader = response.body?.getReader()
      if (!reader) {
        throw new Error('No response reader available')
      }

      let finalData: any = null
      
      while (true) {
        const { done, value } = await reader.read()
        if (done) break

        // Convert the chunk to text
        const chunk = new TextDecoder().decode(value)
        const lines = chunk.split('\n').filter(line => line.trim())

        for (const line of lines) {
          try {
            const data = JSON.parse(line)
            
            switch (data.type) {
              case 'progress':
                setResearchSteps(prev => {
                  const newSteps = [...prev]
                  const stepIndex = newSteps.findIndex(s => s.step === data.step)
                  if (stepIndex >= 0) {
                    newSteps[stepIndex] = {
                      ...newSteps[stepIndex],
                      status: 'in-progress',
                      message: data.message
                    }
                  } else {
                    newSteps.push({
                      step: data.step,
                      status: 'in-progress',
                      message: data.message,
                      timestamp: new Date()
                    })
                  }
                  return newSteps
                })
                setCurrentStep(data.message)
                addActivityLog(data.step === 'video_details' ? 'Loading video information' :
                              data.step === 'analysis' ? 'Processing video content' :
                              'Researching insights', 'progress')
                break

              case 'data':
                setResearchSteps(prev => {
                  const newSteps = [...prev]
                  const stepIndex = newSteps.findIndex(s => s.step === data.step)
                  if (stepIndex >= 0) {
                    newSteps[stepIndex] = {
                      ...newSteps[stepIndex],
                      status: 'completed',
                      message: `${data.step} completed`
                    }
                  }
                  return newSteps
                })
                addActivityLog(data.step === 'video_details' ? 'Video information ready' :
                              data.step === 'analysis' ? 'Video analysis complete' :
                              'Research phase complete', 'complete')
                break

              case 'complete':
                const responseData = data.data
                finalData = responseData
                setResearchSteps(prev => prev.map(step => ({
                  ...step,
                  status: 'completed'
                })))
                addActivityLog('Research completed', 'complete')

                // Set the research content
                if (responseData.research) {
                  const researchContent = responseData.research.choices?.[0]?.message?.content || responseData.research
            setStreamingContent(researchContent)
            
                  // Generate message ID
                  const messageId = `assistant-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
                  
                  // Get sources from research results
                  let initialSources: Source[] = []
                  if (responseData.research.search_results && Array.isArray(responseData.research.search_results)) {
                    initialSources = responseData.research.search_results.map((result: any) => ({
                      title: result.title || 'Untitled',
                      url: result.url || '#',
                      description: result.snippet || result.description || 'No description available',
                      isReal: true,
                      timestamp: new Date(),
                      queryContext: 'Initial Research',
                      messageId
                    }))
                  }
                  
                  // Add message with its sources
            setChatMessages(prev => [...prev, {
                    id: messageId,
              type: 'assistant',
              content: researchContent,
                    timestamp: new Date(),
                    sources: initialSources
                  }])

                  // Log source discovery
                  if (initialSources.length > 0) {
                    addActivityLog(`Found ${initialSources.length} initial sources`, 'complete')
                  }

                  // Store research context
                  setResearchContext({
                    twelvelabsAnalysis: responseData.analysis || '',
                    sonarResponse: researchContent,
                    videoDetails: responseData.video_details || {},
                    originalQuery: prompt.trim()
                  })
                }
                break

              case 'error':
                throw new Error(data.message)
            }
          } catch (e) {
            console.error('Error parsing stream chunk:', e)
          }
        }
      }
    
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Research failed'
      
      setResearchSteps(prev => prev.map(step => 
        step.status === 'in-progress' ? { ...step, status: 'error', message: errorMessage } : step
      ))
      setCurrentStep('')
      setCurrentStepDetail('')
      addActivityLog(`Error: ${errorMessage}`, 'error')
      
      toast({
        title: "Research failed",
        description: errorMessage,
        variant: "destructive"
      })
    } finally {
      setIsResearching(false)
    }
  }

  async function handleSendMessage() {
    if (!chatInput.trim() || isSendingMessage) return
    
    const userMessage = chatInput.trim()
    setChatInput("")
    setIsSendingMessage(true)
    
    // Add user message to chat
    setChatMessages(prev => [...prev, {
      id: `user-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      type: 'user',
      content: userMessage,
      timestamp: new Date()
    }])
    
    try {
      // Check if we have research context
      if (!researchContext) {
        throw new Error("No research context available. Please start a new research session first.")
      }
      
      // Create enhanced query with full context and markdown formatting request
      const enhancedQuery = `
Based on the following research context, please answer this follow-up question:

ORIGINAL VIDEO ANALYSIS (TwelveLabs):
${researchContext.twelvelabsAnalysis}

ORIGINAL RESEARCH RESPONSE:
${researchContext.sonarResponse}

ORIGINAL RESEARCH QUERY:
${researchContext.originalQuery}

FOLLOW-UP QUESTION:
${userMessage}

IMPORTANT: Please provide a comprehensive answer using proper markdown formatting including:
- Use ## for main headings and ### for subheadings
- If table, then proper mardkown table format

Please provide a comprehensive answer that builds upon the previous research and video analysis, incorporating any new insights or connections that might be relevant to this follow-up question, with clear structure and professional formatting.
`
      
      // Send to Sonar API with API key
      const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.RESEARCH.SONAR}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          query: enhancedQuery,
          api_key: isUsingEnvKey ? undefined : apiKey // Include API key if using custom key
        })
      })
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}))
        throw new Error(errorData.error || `HTTP error! status: ${response.status}`)
      }
      
      const data = await response.json()
      
      if (data.success && data.research) {
        let responseContent = ""
        
        // Extract content from different possible response formats
        if (data.research.choices && data.research.choices[0]) {
          responseContent = data.research.choices[0].message.content
        } else if (data.research.content) {
          responseContent = data.research.content
        } else if (typeof data.research === 'string') {
          responseContent = data.research
        }
        
        // Update research context with new response
        setResearchContext(prev => prev ? {
          ...prev,
          sonarResponse: prev.sonarResponse + "\n\n--- FOLLOW-UP RESPONSE ---\n" + responseContent
        } : null)
        
        // Add assistant response to chat
        const messageId = `assistant-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
        
        // Handle new sources from follow-up query
        let querySpecificSources: Source[] = []
        if (data.research.search_results && Array.isArray(data.research.search_results)) {
          querySpecificSources = data.research.search_results.map((result: any) => ({
            title: result.title || 'Untitled',
            url: result.url || '#',
            description: result.snippet || result.description || 'No description available',
            isReal: true,
            timestamp: new Date(),
            queryContext: userMessage,
            messageId // Link sources to specific message
          }))
        }
        
        // Add message with its specific sources
        setChatMessages(prev => [...prev, {
          id: messageId,
          type: 'assistant',
          content: responseContent,
          timestamp: new Date(),
          sources: querySpecificSources
        }])
        
        // Log source discovery
        if (querySpecificSources.length > 0) {
          addActivityLog(`Found ${querySpecificSources.length} sources for "${userMessage}"`, 'complete')
        }
        
        addActivityLog('Follow-up research completed', 'complete')
        
      } else {
        throw new Error(data.error || 'Failed to get response from research API')
      }
      
    } catch (error) {
      console.error("Error sending message:", error)
      const errorMessage = error instanceof Error ? error.message : "Failed to send message"
      
      // Add error message to chat
      setChatMessages(prev => [...prev, {
        id: `assistant-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
        type: 'assistant',
        content: `I apologize, but I encountered an error while processing your question: "${errorMessage}". Please try again or rephrase your question.`,
        timestamp: new Date()
      }])
      
      addActivityLog(`Error: ${errorMessage}`, 'error')
      
      toast({
        title: "Error",
        description: errorMessage,
        variant: "destructive"
      })
    } finally {
      setIsSendingMessage(false)
    }
  }

  const canStartResearch = Boolean(isConnected && selectedIndex && selectedVideo && prompt.trim())

  const handleVideoSelect = (videoId: string) => {
    setSelectedVideo(videoId)
    const selectedVideoData = videos.find(v => v.id === videoId)
    setSelectedVideoThumbnail(selectedVideoData?.thumbnail_url || null)
    setSelectedVideoUrl(selectedVideoData?.video_url || null)
  }

  function getVideoDuration(file: File): Promise<number> {
    return new Promise((resolve, reject) => {
      try {
        const url = URL.createObjectURL(file)
        const video = document.createElement('video')
        video.preload = 'metadata'
        video.onloadedmetadata = () => {
          URL.revokeObjectURL(url)
          resolve(Number(video.duration || 0))
        }
        video.onerror = () => {
          URL.revokeObjectURL(url)
          reject(new Error('Could not read video metadata'))
        }
        video.src = url
      } catch (e) {
        reject(e)
      }
    })
  }

  async function handleUploadVideo() {
    if (!uploadFile) return
    
    // Validate video duration
    try {
      const duration = await getVideoDuration(uploadFile)
      if (duration > 7200) { // 2 hours in seconds
        toast({ title: 'Error', description: ERROR_MESSAGES.INVALID_DURATION })
        return
      }
    } catch {
      toast({ title: 'Error', description: 'Could not read video duration.' })
      return
    }
    setIsUploading(true)
    try {
      const formData = new FormData()
      formData.append('file', uploadFile)
      const res = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.TWELVELABS.UPLOAD}`, {
        method: 'POST',
        body: formData
      })
      const data = await res.json().catch(() => ({} as any))
      if (!res.ok || !data?.success) {
        const msg = data?.error || `Upload failed with status ${res.status}`
        throw new Error(msg)
      }
      toast({ title: 'Upload complete', description: `Video uploaded. ID: ${data.video_id}` })
      // Remove the automatic reset to environment key - this was causing unwanted refreshes
      // await switchToEnvironmentKey()
      setIsUploadVideoModalOpen(false)
      setUploadFile(null)
      setUploadStep(0)
      
      // Optionally refresh the current index's videos without changing selection
      if (selectedIndex) {
        await handleIndexChange(selectedIndex, isUsingEnvKey ? null : apiKey, isUsingEnvKey)
      }
    } catch (err: unknown) {
      const message = err instanceof Error ? err.message : 'Failed to upload video'
      toast({ title: 'Upload failed', description: message })
    } finally {
      setIsUploading(false)
    }
  }

  // If research has started, show only the chat interface
  if (researchStarted) {
    return (
      <div className="min-h-screen bg-white flex flex-col">
        <Toaster />

        {/* Header */}
        <header className="fixed top-0 left-0 right-0 border-b border-gray-100 bg-white z-50">
          <div className="max-w-[1600px] mx-auto px-6 py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-2">
                <Logo />
                <span className="text-xl font-semibold text-gray-900">Video Deep Research</span>
              </div>
              <div className="flex items-center space-x-3">
                <Button
                  onClick={() => {
                    setResearchStarted(false)
                    setResearchContext(null)
                  }}
                  variant="outline"
                  size="sm"
                  className="text-gray-700 border-gray-300 bg-white hover:bg-gray-50 hover:border-gray-400 hover:text-gray-900 shadow-sm transition-all duration-200 font-medium"
                >
                  <ArrowLeft className="w-4 h-4 mr-2" />
                  Back to Search
                </Button>
              </div>
            </div>
          </div>
        </header>

        {/* Main Content Area - Add top padding to account for fixed header */}
        <div className="flex-1 flex overflow-hidden relative pt-[72px]">
          {/* Chat Content */}
          <div className="flex-1 flex flex-col overflow-hidden pr-80">
            {/* Chat Messages - Scrollable Area */}
            <div className="flex-1 overflow-y-auto pb-24">
              <div className="max-w-4xl mx-auto space-y-6 p-6">
                {/* Chat Messages */}
                {chatMessages.map((message, index) => (
                  <div key={message.id}>
                    {/* User Message */}
                    {message.type === 'user' && (
                      <div className="flex justify-end mb-6">
                        <div className="max-w-5xl px-6 py-4 rounded-2xl bg-gray-900 text-white rounded-br-sm">
                          {/* Video Thumbnail - Show when available */}
                          {selectedVideoThumbnail && (
                            <div className="mb-3 flex items-center space-x-3">
                              <VideoThumbnail 
                                src={selectedVideoThumbnail || undefined} 
                                alt="Video thumbnail" 
                                className="w-8 h-8"
                              />
                              <span className="text-sm text-gray-300">
                                {videos.find(v => v.id === selectedVideo)?.name || 'Selected Video'}
                              </span>
                            </div>
                          )}
                          <p className="text-base">{message.content}</p>
                        </div>
                      </div>
                    )}

                    {/* Assistant Message with Sources */}
                    {message.type === 'assistant' && (
                      <div className="w-full mb-6">
                        {/* Show sources above the response */}
                        {message.sources && message.sources.length > 0 && (
                          <div className="mb-4">
                            <div className="px-6">
                              <h3 className="text-sm font-medium text-gray-900 mb-3 flex items-center">
                                <BookOpen className="w-4 h-4 mr-2" />
                                {message.sources.length} Sources Found
                              </h3>
                              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                {message.sources.map((source, sourceIndex) => (
                                  <div 
                                    key={`${message.id}-source-${sourceIndex}`}
                                    className="p-3 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors"
                                  >
                                    <div className="flex items-start space-x-3">
                                      <div className="flex-shrink-0">
                                        <div className={`w-2 h-2 rounded-full mt-2 ${
                                          source.isReal ? 'bg-green-500' : 'bg-orange-500'
                                        }`} />
                                      </div>
                                      <div className="flex-1 min-w-0">
                                        <h5 className="text-sm font-medium text-gray-900 truncate">
                                          {source.title}
                                        </h5>
                                        <p className="text-xs text-gray-600 mt-1 line-clamp-2">
                                          {source.description}
                                        </p>
                                        <a 
                                          href={source.url} 
                                          target="_blank" 
                                          rel="noopener noreferrer"
                                          className="text-xs text-blue-600 hover:text-blue-800 mt-1 inline-block truncate max-w-full"
                                        >
                                          {source.url}
                                        </a>
                                      </div>
                                    </div>
                                  </div>
                                ))}
                              </div>
                        </div>
                      </div>
                    )}

                        {/* Response content */}
                        <div className="w-full text-gray-900 px-6 py-6 border-t border-b border-gray-200">
                          <div className="prose prose-lg max-w-none prose-headings:text-gray-900 prose-h2:text-xl prose-h2:font-bold prose-h2:mt-8 prose-h2:mb-4 prose-h3:text-lg prose-h3:font-semibold prose-h3:mt-6 prose-h3:mb-3 prose-p:text-gray-800 prose-p:leading-relaxed prose-strong:text-gray-900 prose-strong:font-semibold prose-ul:my-4 prose-li:my-1 prose-blockquote:border-l-4 prose-blockquote:border-blue-500 prose-blockquote:bg-blue-50 prose-blockquote:px-4 prose-blockquote:py-2 prose-blockquote:italic prose-code:bg-gray-100 prose-code:px-1 prose-code:py-0.5 prose-code:rounded prose-code:text-sm prose-a:text-blue-600 prose-a:underline hover:prose-a:text-blue-800 [&_ol>li]:font-semibold [&_ol>li]:text-gray-900 [&_ol>li]:text-[1.05rem] [&_li>p]:m-0 [&_li>p]:inline">
                            <ReactMarkdown 
                              remarkPlugins={[remarkGfm]}
                              components={{
                                // Custom styling for different elements
                                h2: ({children}) => (
                                  <h2 className="text-xl font-bold text-gray-900 mt-8 mb-4 pb-2 border-b border-gray-200">
                                    {children}
                                  </h2>
                                ),
                                h3: ({children}) => (
                                  <h3 className="text-lg font-semibold text-gray-900 mt-6 mb-3">
                                    {children}
                                  </h3>
                                ),
                                blockquote: ({children}) => (
                                  <blockquote className="border-l-4 border-blue-500 bg-blue-50 px-4 py-3 my-4 italic text-blue-900 rounded-r-md">
                                    {children}
                                  </blockquote>
                                ),
                                code: ({children, className}) => {
                                  const isInline = !className;
                                  if (isInline) {
                                    return (
                                      <code className="bg-gray-100 px-2 py-1 rounded text-sm font-mono text-gray-800">
                                        {children}
                                      </code>
                                    );
                                  }
                                  return (
                                    <code className={className}>
                                      {children}
                                    </code>
                                  );
                                },
                                pre: ({children}) => (
                                  <pre className="bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto my-4">
                                    {children}
                                  </pre>
                                ),
                                ul: ({children}) => (
                                  <ul className="list-disc list-inside my-4 space-y-2">
                                    {children}
                                  </ul>
                                ),
                                ol: ({children}) => (
                                  <ol className="list-decimal list-inside my-4 space-y-2">
                                    {children}
                                  </ol>
                                ),
                                li: ({children}) => (
                                  <li className="text-gray-800 leading-relaxed">
                                    {children}
                                  </li>
                                ),
                                table: ({children}) => (
                                  <div className="w-full overflow-x-auto my-4">
                                    <table className="w-full border-collapse text-sm">
                                      {children}
                                    </table>
                                  </div>
                                ),
                                thead: ({children}) => (
                                  <thead className="bg-gray-50">
                                    {children}
                                  </thead>
                                ),
                                tbody: ({children}) => (
                                  <tbody className="divide-y divide-gray-200">
                                    {children}
                                  </tbody>
                                ),
                                tr: ({children}) => (
                                  <tr className="even:bg-gray-50">
                                    {children}
                                  </tr>
                                ),
                                th: (props: any) => (
                                  <th {...props} className={`border border-gray-300 px-3 py-2 text-left font-semibold text-gray-900 ${props.className || ''}`}>
                                    {props.children}
                                  </th>
                                ),
                                td: (props: any) => (
                                  <td {...props} className={`border border-gray-200 px-3 py-2 align-top text-gray-800 whitespace-pre-wrap ${props.className || ''}`}>
                                    {props.children}
                                  </td>
                                ),
                                a: ({children, href}) => (
                                  <a 
                                    href={href} 
                                    target="_blank" 
                                    rel="noopener noreferrer"
                                    className="text-blue-600 underline hover:text-blue-800 transition-colors"
                                  >
                                    {children}
                                  </a>
                                ),
                                hr: () => (
                                  <hr className="border-t-2 border-gray-200 my-8" />
                                ),
                                strong: ({children}) => (
                                  <strong className="font-semibold text-gray-900">
                                    {children}
                                  </strong>
                                ),
                                em: ({children}) => (
                                  <em className="italic text-gray-700">
                                    {children}
                                  </em>
                                )
                              }}
                            >
                              {linkifyReferences(message.content, message.sources)}
                            </ReactMarkdown>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                ))}

                {/* Loading Message for Follow-up Questions */}
                {isSendingMessage && (
                  <div className="w-full mb-6">
                    <div className="w-full text-gray-900 px-6 py-6 border-t border-b border-gray-200">
                      <div className="flex items-center space-x-3">
                        <Loader2 className="w-6 h-6 text-gray-900 animate-spin" />
                        <span className="text-gray-600">Searching for the references please...</span>
                      </div>
                    </div>
                  </div>
                )}

                {/* Progress Bar - Show only during research */}
                {isResearching && (
                  <div className="bg-white border border-gray-200 rounded-lg p-6 shadow-sm">
                    <div className="flex items-center justify-between mb-3">
                      <span className="text-lg font-medium text-gray-900">
                        {(() => {
                          const currentStep = researchSteps.find(step => step.status === 'in-progress');
                          const completedSteps = researchSteps.filter(step => step.status === 'completed').length;
                          const totalSteps = researchSteps.length;
                          
                          if (completedSteps === totalSteps) {
                            return 'Research completed! 🎉';
                          } else if (currentStep) {
                            return currentStep.message;
                          } else if (completedSteps > 0) {
                            return `Step ${completedSteps + 1} of ${totalSteps}`;
                          } else {
                            return 'Starting research...';
                          }
                        })()}
                      </span>
                      <div className="w-8 h-8 flex items-center justify-center">
                        <AnimatedGif />
                      </div>
                    </div>
                    
                    <div className="w-full bg-gray-200 rounded-full h-2 relative overflow-hidden">
                      <div 
                        className="h-2 bg-gray-600 rounded-full transition-all duration-500 ease-out"
                        style={{
                          width: `${(() => {
                            const completedSteps = researchSteps.filter(step => step.status === 'completed').length;
                            const inProgressSteps = researchSteps.filter(step => step.status === 'in-progress').length;
                            const totalSteps = researchSteps.length;
                            
                            if (completedSteps === totalSteps) {
                              return 100;
                            } else if (inProgressSteps > 0) {
                              return ((completedSteps + 0.5) / totalSteps) * 100;
                            } else {
                              return (completedSteps / totalSteps) * 100;
                            }
                          })()}%`
                        }}
                      />
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Chat Input Area - Fixed at Bottom */}
            <div className="fixed bottom-0 left-0 right-80 bg-white border-t border-gray-200 z-40">
              <div className="max-w-4xl mx-auto p-4">
                <div className="flex items-center space-x-3">
                  <div className="flex-1">
                    <textarea
                      value={chatInput}
                      onChange={(e) => setChatInput(e.target.value)}
                      placeholder={isSendingMessage ? "Processing your question..." : "Ask a follow-up question about the research..."}
                      className="w-full px-4 py-3 border border-gray-300 rounded-2xl resize-none focus:outline-none focus:ring-2 focus:ring-gray-900 focus:border-transparent"
                      rows={1}
                      onKeyDown={(e) => {
                        if (e.key === 'Enter' && !e.shiftKey) {
                          e.preventDefault()
                          handleSendMessage()
                        }
                      }}
                    />
                  </div>
                  <Button
                    onClick={handleSendMessage}
                    disabled={!chatInput.trim() || isSendingMessage}
                    className="bg-gray-900 hover:bg-gray-800 text-white px-4 h-[48px] rounded-2xl disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isSendingMessage ? (
                      <Loader2 className="w-4 h-4 animate-spin" />
                    ) : (
                      <Send className="w-4 h-4" />
                    )}
                  </Button>
                </div>
              </div>
            </div>
          </div>

          {/* Activity Sidebar */}
          <div className="w-80 border-l border-gray-200 bg-gray-50 shadow-lg flex-shrink-0 fixed right-0 top-[72px] bottom-0 overflow-hidden flex flex-col z-40">
            {/* Sidebar Header */}
            <div className="p-6 bg-gray-50">
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-semibold text-gray-900">Research Mode</h3>
              </div>

              {/* Tabs */}
              <div className="flex space-x-2 mt-4 bg-gray-100 p-1 rounded-lg">
                <button
                  onClick={() => setActiveTab('activity')}
                  className={`flex-1 px-4 py-2.5 text-sm font-medium rounded-md transition-all duration-200 flex items-center justify-center gap-2 ${
                    activeTab === 'activity' 
                      ? 'bg-white text-gray-900 shadow-sm border border-gray-200' 
                      : 'text-gray-600 hover:text-gray-900 hover:bg-white/50'
                  }`}
                >
                  <svg className="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  </svg>
                  Activity
                </button>
                <button
                  onClick={() => setActiveTab('sources')}
                  className={`flex-1 px-4 py-2.5 text-sm font-medium rounded-md transition-all duration-200 flex items-center justify-center gap-2 ${
                    activeTab === 'sources' 
                      ? 'bg-white text-gray-900 shadow-sm border border-gray-200' 
                      : 'text-gray-600 hover:text-gray-900 hover:bg-white/50'
                  }`}
                >
                  <svg className="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
                  </svg>
                  Sources
                </button>
              </div>
            </div>

            {/* Scrollable Content Area */}
            <div className="flex-1 overflow-y-auto">
              <div className="p-4">
                {/* Tab Content */}
                {activeTab === 'activity' ? (
                  <div className="space-y-4">
                    {activityLogs.map((log, index) => (
                      <div key={index} className="flex items-start space-x-3 hover:bg-gray-50 p-2 rounded-lg transition-colors">
                        <div className="mt-1 flex-shrink-0">
                          <Check className="w-4 h-4 text-black" />
                        </div>
                        <div className="flex-1 min-w-0">
                          <p className="text-sm text-gray-700">{log.message}</p>
                          <p className="text-xs text-gray-500 mt-1">
                            {log.timestamp.toLocaleTimeString()}
                          </p>
                        </div>
                      </div>
                    ))}
                    {activityLogs.length === 0 && (
                      <div className="text-center py-8 text-gray-500">
                        <svg className="w-12 h-12 mx-auto mb-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                        <p className="text-sm">No activity yet</p>
                      </div>
                    )}
                  </div>
                ) : (
                  <div className="space-y-4">
                    {chatMessages.some(msg => msg.type === 'assistant' && msg.sources && msg.sources.length > 0) ? (
                      <>
                        <div className="mb-4">
                          <h3 className="text-sm font-medium text-gray-900">
                            Research Sources
                          </h3>
                          <p className="text-xs text-gray-500 mt-1">
                            All sources found during research
                          </p>
                        </div>
                        
                        {/* Group sources by query */}
                        {chatMessages
                          .filter(msg => msg.type === 'assistant' && msg.sources && msg.sources.length > 0)
                          .map((message, msgIndex) => (
                            <div key={message.id} className="mb-6">
                              <div className="mb-2">
                                <h4 className="text-sm font-medium text-gray-700">
                                  {msgIndex === 0 ? 'Initial Research' : 'Follow-up'}
                                </h4>
                                <p className="text-xs text-gray-500">
                                  {message.sources!.length} sources
                                </p>
                              </div>
                              
                              <div className="space-y-3">
                                {message.sources!.map((source, sourceIndex) => (
                                  <div 
                                    key={`${message.id}-source-${sourceIndex}`}
                                    className="p-3 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors"
                                  >
                                    <div className="flex items-start space-x-3">
                                      <div className="flex-shrink-0">
                                        <div className={`w-2 h-2 rounded-full mt-2 ${
                                          source.isReal ? 'bg-green-500' : 'bg-orange-500'
                                        }`} />
                                      </div>
                                      <div className="flex-1 min-w-0">
                                        <h5 className="text-sm font-medium text-gray-900 truncate">
                                          {source.title}
                                        </h5>
                                        <p className="text-xs text-gray-600 mt-1 line-clamp-2">
                                          {source.description}
                                        </p>
                                        <a 
                                          href={source.url} 
                                          target="_blank" 
                                          rel="noopener noreferrer"
                                          className="text-xs text-blue-600 hover:text-blue-800 mt-1 inline-block truncate max-w-full"
                                        >
                                          {source.url}
                                        </a>
                                      </div>
                                    </div>
                                  </div>
                                ))}
                              </div>
                            </div>
                          ))
                        }
                      </>
                    ) : (
                      <div className="text-center py-8 text-gray-500">
                        <svg className="w-12 h-12 mx-auto mb-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                        </svg>
                        <p className="text-sm">No sources available</p>
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>
          )}
        </div>
      </div>
    )
  }

  // Main landing page UI
  return (
    <div className="min-h-screen bg-white">
      <Toaster />
      
      {/* Main content container */}
      <div className="container mx-auto px-4 py-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-900 mb-4">Video Deep Research</h1>
          <p className="text-xl text-gray-600">AI-powered research from video content</p>
        </div>
        
        {/* Connection and setup area */}
        <div className="max-w-4xl mx-auto">
          <Card className="p-6">
            <div className="space-y-6">
              {!isConnected ? (
                <div className="text-center">
                  <h2 className="text-2xl font-semibold mb-4">Connect Your API</h2>
                  <p className="text-gray-600 mb-6">Connect your TwelveLabs API key to get started</p>
                  <Button onClick={() => setIsApiModalOpen(true)}>
                    Connect API
                  </Button>
                </div>
              ) : (
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <h2 className="text-2xl font-semibold">Select Video for Research</h2>
                    <div className="flex items-center space-x-2">
                      <span className="text-sm text-gray-600">Connected</span>
                      <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                    </div>
                  </div>
                  
                  {indexes.length > 0 && (
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <Label>Index</Label>
                        <Select value={selectedIndex} onValueChange={handleIndexChange} disabled={!isConnected}>
                          <SelectTrigger>
                            <SelectValue placeholder="Select an index" />
                          </SelectTrigger>
                          <SelectContent>
                            {indexes.map((index) => (
                              <SelectItem key={index.id} value={index.id}>
                                {index.name}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                      
                      <div>
                        <Label>Video</Label>
                        <Select value={selectedVideo} onValueChange={handleVideoSelect} disabled={!selectedIndex || isLoadingVideos}>
                          <SelectTrigger>
                            <SelectValue placeholder={isLoadingVideos ? "Loading videos..." : "Select a video"} />
                          </SelectTrigger>
                          <SelectContent>
                            {videos.map((video) => (
                              <SelectItem key={video.id} value={video.id}>
                                {video.name} ({formatDuration(video.duration)})
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                  )}
                  
                  {selectedVideoUrl && (
                    <div className="mt-6">
                      <InlineVideoPlayer
                        videoUrl={selectedVideoUrl}
                        thumbnailUrl={selectedVideoThumbnail || undefined}
                        title={videos.find(v => v.id === selectedVideo)?.name}
                        className="max-w-2xl mx-auto"
                      />
                    </div>
                  )}
                  
                  <div className="mt-6">
                    <Label>Research Question</Label>
                    <Input
                      placeholder="What would you like to research about this video?"
                      value={prompt}
                      onChange={(e) => setPrompt(e.target.value)}
                      className="mt-2"
                    />
                  </div>
                  
                  <div className="flex justify-center mt-6">
                    <Button 
                      onClick={handleStartResearch}
                      disabled={!canStartResearch || isResearching}
                      size="lg"
                      className="px-8"
                    >
                      {isResearching ? (
                        <>
                          <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                          Researching...
                        </>
                      ) : (
                        'Start Research'
                      )}
                    </Button>
                  </div>
                </div>
              )}
            </div>
          </Card>
        </div>
      </div>

      {/* API Connection Modal */}
      <Dialog open={isApiModalOpen} onOpenChange={setIsApiModalOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Connect TwelveLabs API</DialogTitle>
            <DialogDescription>
              Enter your TwelveLabs API key to get started with video analysis.
            </DialogDescription>
          </DialogHeader>
          <form onSubmit={handleConnect} className="space-y-4">
            <div>
              <Label htmlFor="api-key">API Key</Label>
              <Input
                id="api-key"
                type="password"
                placeholder="tlk_..."
                value={apiKey}
                onChange={(e) => setApiKey(e.target.value)}
                className="mt-1"
              />
            </div>
            <div className="flex justify-end space-x-2">
              <Button type="button" variant="outline" onClick={() => setIsApiModalOpen(false)}>
                Cancel
              </Button>
              <Button type="submit" disabled={isConnecting}>
                {isConnecting ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    Connecting...
                  </>
                ) : (
                  'Connect'
                )}
              </Button>
            </div>
          </form>
        </DialogContent>
      </Dialog>
    </div>
  )
}