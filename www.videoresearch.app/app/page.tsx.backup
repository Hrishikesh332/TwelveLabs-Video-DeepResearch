"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { Toaster } from "@/components/ui/toaster"
import { useToast } from "@/hooks/use-toast"
import { Video, Github, Check, Loader2, Plus, X } from 'lucide-react'
import ReactMarkdown from 'react-markdown'
import remarkGfm from 'remark-gfm'

type IndexItem = { id: string; name: string }
type VideoItem = { id: string; name: string; duration: number }

const API_BASE_URL = "http://localhost:5000"

export default function DeepResearchLanding() {
  const { toast } = useToast()

  const [isApiModalOpen, setIsApiModalOpen] = useState(false)
  const [isComingSoonOpen, setIsComingSoonOpen] = useState(false)

  const [apiKey, setApiKey] = useState("")
  const [isConnecting, setIsConnecting] = useState(false)
  const [isConnected, setIsConnected] = useState(false)
  const [justConnected, setJustConnected] = useState(false)

  const [indexes, setIndexes] = useState<IndexItem[]>([])
  const [videos, setVideos] = useState<VideoItem[]>([])
  const [selectedIndex, setSelectedIndex] = useState("")
  const [selectedVideo, setSelectedVideo] = useState("")
  const [isLoadingVideos, setIsLoadingVideos] = useState(false)

  const [prompt, setPrompt] = useState("")

  const [isResearching, setIsResearching] = useState(false)
  const [researchStarted, setResearchStarted] = useState(false)
  const [researchSteps, setResearchSteps] = useState<Array<{
    step: string
    status: 'pending' | 'in-progress' | 'completed' | 'error'
    message: string
    timestamp: Date
  }>>([])
  const [streamingContent, setStreamingContent] = useState("")
  const [currentStep, setCurrentStep] = useState("")
  const [currentStepDetail, setCurrentStepDetail] = useState("")
  const [sources, setSources] = useState<Array<{title: string, url: string, description: string, isReal: boolean}>>([])
  


  // Chat state
  const [chatInput, setChatInput] = useState("")
  const [showActivitySidebar, setShowActivitySidebar] = useState(false)
  const [activeTab, setActiveTab] = useState<'activity' | 'sources'>('activity')
  const [activityLogs, setActivityLogs] = useState<Array<{
    message: string
    timestamp: Date
    type: 'info' | 'progress' | 'complete' | 'error'
  }>>([])

  function handleConnect(e?: React.FormEvent) {
    e?.preventDefault?.()
    console.log("handleConnect called with API key:", apiKey)
    
    if (!apiKey.trim()) {
      console.log("API key validation failed - empty key")
      toast({ title: "API key required", description: "Please enter your TwelveLabs API key." })
      return
    }
    
    console.log("Starting connection process...")
    setIsConnecting(true)
    
    ;(async () => {
      try {
        console.log("Making API request to:", `${API_BASE_URL}/api/config/twelvelabs`)
        console.log("Request payload:", { api_key: apiKey })
        
        const res = await fetch(`${API_BASE_URL}/api/config/twelvelabs`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ api_key: apiKey }),
        })
        
        console.log("Response status:", res.status)
        console.log("Response ok:", res.ok)
        
        const data = await res.json().catch(() => ({} as any))
        console.log("Response data:", data)

        if (!res.ok || !data?.success) {
          const msg = data?.error || `Request failed with status ${res.status}`
          console.log("Request failed:", msg)
          throw new Error(msg)
        }

        // On success: store indexes, mark connected, pulse the tick, and auto-load first index's videos.
        const returnedIndexes = Array.isArray(data.indexes) ? data.indexes : []
        console.log("Received indexes:", returnedIndexes)
        
        setIndexes(returnedIndexes)
        setIsConnected(true)
        setIsApiModalOpen(false)
        setJustConnected(true)
        setTimeout(() => setJustConnected(false), 1200)

        if (returnedIndexes.length > 0) {
          const firstId = returnedIndexes[0].id
          console.log("Auto-selecting first index:", firstId)
          setSelectedIndex(firstId)
          await handleIndexChange(firstId)
        }

        console.log("Connection successful!")
        toast({ title: "Connected", description: data?.message || "TwelveLabs API key configured successfully." })
      } catch (err: unknown) {
        const message = err instanceof Error ? err.message : "Invalid API key: Failed to fetch indexes"
        console.error("Connection error:", err)
        console.log("Error message:", message)
        toast({ title: "Connection failed", description: message })
      } finally {
        console.log("Connection process finished, setting isConnecting to false")
        setIsConnecting(false)
      }
    })()
  }

  async function handleIndexChange(indexId: string) {
    setSelectedIndex(indexId)
    setSelectedVideo("")
    setVideos([])
    if (!indexId) return

    setIsLoadingVideos(true)
    try {
      const res = await fetch(`${API_BASE_URL}/api/videos`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ api_key: apiKey, index_id: indexId }),
      })

      if (!res.ok) {
        const text = await res.text().catch(() => "")
        throw new Error(text || `Request failed with status ${res.status}`)
      }

      const data = await res.json()
      if (data?.success) {
        setVideos(data.videos || [])
      } else {
        throw new Error(data?.error || "Could not load videos for this index.")
      }
    } catch (err: unknown) {
      const message = err instanceof Error ? err.message : "Failed to load videos."
      toast({ title: "Error", description: message })
    } finally {
      setIsLoadingVideos(false)
    }
  }

  function addActivityLog(message: string, type: 'info' | 'progress' | 'complete' | 'error' = 'info') {
    setActivityLogs(prev => [...prev, {
      message,
      timestamp: new Date(),
      type
    }])
  }

  // Function to extract real sources from API response
  function extractRealSources(data: any): Array<{title: string, url: string, description: string, isReal: boolean}> {
    if (!data.workflow?.research) return []
    
    const research = data.workflow.research
    
    // First try to get sources from search_results (real sources from Sonar)
    if (research.search_results && Array.isArray(research.search_results)) {
      return research.search_results.map((result: any) => ({
        title: result.title || 'Untitled',
        url: result.url || '#',
        description: result.snippet || 'No description available',
        isReal: true
      }))
    }
    
    // Fallback to citations if available
    if (research.citations && Array.isArray(research.citations)) {
      return research.citations.map((citation: string, index: number) => ({
        title: `Source ${index + 1}`,
        url: citation,
        description: 'Citation from research',
        isReal: true
      }))
    }
    
    // If no real sources, return empty array (will use default sources)
    return []
  }

  async function handleStartResearch() {
    if (!canStartResearch) return
    
    console.log("Starting research workflow...")
    setIsResearching(true)
    setResearchStarted(true)
    setResearchSteps([])
    setStreamingContent("")
    setCurrentStep("")
    setCurrentStepDetail("")
    setActivityLogs([])
    
    // Add initial activity log
    addActivityLog(`I'm gathering information on ${prompt.toLowerCase()}, including emerging innovations, major developments, and shifts in consumer or industry behavior as of 2025. I'll provide you with a structured overview of key areas such as AI, hardware, software, cybersecurity, and more, using up-to-date, reputable sources.`, 'info')
    
    // Initialize steps
    const initialSteps = [
      { step: 'video_details', status: 'pending' as const, message: 'Fetching video details', timestamp: new Date() },
      { step: 'analysis', status: 'pending' as const, message: 'Analyzing video content', timestamp: new Date() },
      { step: 'research', status: 'pending' as const, message: 'Conducting deep research', timestamp: new Date() }
    ]
    setResearchSteps(initialSteps)
    
    try {
      const payload = {
        twelvelabs_api_key: apiKey,
        index_id: selectedIndex,
        video_id: selectedVideo,
        analysis_prompt: prompt.trim(),
        research_query: prompt.trim()
      }
      
      console.log("Sending workflow request to:", `${API_BASE_URL}/api/workflow`)
      console.log("Request payload:", payload)
      
      // Update first step to in-progress
      setResearchSteps(prev => prev.map((step, idx) => 
        idx === 0 ? { ...step, status: 'in-progress' } : step
      ))
      setCurrentStep('Fetching video details')
      setCurrentStepDetail('Getting video information...')
      addActivityLog('Fetching video details...', 'progress')
      
      const response = await fetch(`${API_BASE_URL}/api/workflow`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload)
      })
      
      console.log("Response status:", response.status)
      console.log("Response headers:", Object.fromEntries(response.headers.entries()))
      
      if (!response.ok) {
        let errorMessage = `HTTP error! status: ${response.status}`
        try {
          const errorText = await response.text()
          console.log("Error response body:", errorText)
          
          try {
            const errorData = JSON.parse(errorText)
            errorMessage = errorData.error || errorData.message || errorMessage
          } catch {
            if (errorText && errorText.length < 200) {
              errorMessage = errorText
            }
          }
        } catch (e) {
          console.log("Could not read error response body:", e)
        }
        
        throw new Error(errorMessage)
      }
      
      // Handle JSON response
      const data = await response.json()
      console.log("Received JSON response:", data)

      
      if (data.success && data.workflow) {
        // Update video details step
        setResearchSteps(prev => prev.map((step, idx) => 
          idx === 0 ? { ...step, status: 'completed', message: 'Video details retrieved' } : 
          idx === 1 ? { ...step, status: 'in-progress' } : step
        ))
        setCurrentStep('Analyzing video content')
        setCurrentStepDetail('Processing video data...')
        addActivityLog('Video details retrieved successfully', 'progress')
        
        // Simulate analysis progress
        setTimeout(() => {
          setResearchSteps(prev => prev.map((step, idx) => 
            idx === 1 ? { ...step, status: 'completed', message: 'Video analysis completed' } : 
            idx === 2 ? { ...step, status: 'in-progress' } : step
          ))
          setCurrentStep('Conducting deep research')
          setCurrentStepDetail('Searching for information...')
          addActivityLog('Video analysis completed', 'progress')
          
          // Complete research step
          setTimeout(() => {
            setResearchSteps(prev => prev.map((step, idx) => 
              idx === 2 ? { ...step, status: 'completed', message: 'Research completed successfully' } : step
            ))
            setCurrentStep('')
            setCurrentStepDetail('')
            addActivityLog('Research completed successfully!', 'complete')
            
            // Set the research content
            if (data.workflow.research && data.workflow.research.choices && data.workflow.research.choices[0]) {
              setStreamingContent(data.workflow.research.choices[0].message.content)
            } else if (data.workflow.analysis) {
              setStreamingContent(data.workflow.analysis)
            }
            
            // Extract and set real sources from API response
            const realSources = extractRealSources(data)
            if (realSources.length > 0) {
              setSources(realSources)
            }
          }, 1000)
        }, 1000)
      
      } else {
        throw new Error(data.error || 'Research failed')
      }
    
    } catch (error) {
      console.error("Research workflow error:", error)
      const errorMessage = error instanceof Error ? error.message : 'Research failed'
      
      setResearchSteps(prev => prev.map(step => 
        step.status === 'in-progress' ? { ...step, status: 'error', message: errorMessage } : step
      ))
      setCurrentStep('')
      setCurrentStepDetail('')
      addActivityLog(`Error: ${errorMessage}`, 'error')
      
      toast({
        title: "Research failed",
        description: errorMessage,
        variant: "destructive"
      })
    } finally {
      setIsResearching(false)
    }
  }

  const canStartResearch = Boolean(isConnected && selectedIndex && selectedVideo && prompt.trim())

  // Landing page interface
  return (
    <div className="min-h-screen bg-white">
      <Toaster />

      {/* Header */}
      <header className="border-b border-gray-100">
        <div className="container mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <div className="w-8 h-8 bg-gray-900 rounded-lg flex items-center justify-center">
                <Video className="w-4 h-4 text-white" />
              </div>
              <span className="text-xl font-semibold text-gray-900">Video Deep Research</span>
            </div>
            <div className="flex items-center gap-3">
              <Button variant="outline" size="sm" className="text-gray-600 border-gray-200 bg-transparent">
                <svg aria-hidden="true" className="w-4 h-4" viewBox="0 0 24 24">
                  <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" />
                  <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" />
                  <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z" />
                  <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" />
                </svg>
              </Button>
              <Button variant="outline" size="sm" className="text-gray-600 border-gray-200 bg-transparent">
                <Github className="w-4 h-4" />
              </Button>
            </div>
          </div>
        </div>
      </header>

      {/* Main */}
      <main className="container mx-auto px-6 py-16">
        <div className="max-w-4xl mx-auto">
          {/* Badge */}
          <div className="flex justify-center mb-12">
            <div className="inline-flex items-center px-4 py-2 bg-gray-50 border border-gray-200 rounded-full text-sm text-gray-700">
              <span className="bg-gray-900 text-white px-2 py-1 rounded-full text-xs font-medium mr-3">New</span>
              AI-powered research from video content
              <span className="ml-2 text-gray-400">→</span>
            </div>
          </div>

          {/* Hero */}
          <div className="text-center mb-12">
            <h1 className="text-5xl md:text-6xl font-bold text-gray-900 mb-4 leading-tight">
              What can I research for you?
            </h1>
          </div>

          {/* Main input card */}
          <div className="max-w-3xl mx-auto mb-16">
            <Card className="border border-gray-200 rounded-2xl p-0 shadow-sm hover:shadow-md transition-shadow">
              <div className="space-y-4 p-6">
                {/* Toolbar: dropdowns + connect button */}
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center gap-3">
                    {isConnected && (
                      <>
                        <Select value={selectedIndex} onValueChange={handleIndexChange}>
                          <SelectTrigger className="w-56 h-8 text-xs">
                            <SelectValue placeholder="Select Index" />
                          </SelectTrigger>
                          <SelectContent>
                            {indexes.map((idx) => (
                              <SelectItem key={idx.id} value={idx.id}>
                                {idx.name}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>

                        <Select
                          value={selectedVideo}
                          onValueChange={setSelectedVideo}
                          disabled={!selectedIndex || isLoadingVideos}
                        >
                          <SelectTrigger className="w-56 h-8 text-xs">
                            <SelectValue placeholder={isLoadingVideos ? "Loading videos..." : "Select Video"} />
                          </SelectTrigger>
                          <SelectContent>
                            {videos.map((v) => (
                              <SelectItem key={v.id} value={v.id}>
                                {v.name}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </>
                    )}
                  </div>

                  {/* Connect TwelveLabs API Key button */}
                  <Button
                    onClick={() => setIsApiModalOpen(true)}
                    variant="outline"
                    size="sm"
                    className="text-xs text-gray-600 border-gray-200 bg-transparent hover:bg-gray-50"
                  >
                    {isConnected ? (
                      <div className="flex items-center space-x-2">
                        <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                        <span>Connected</span>
                      </div>
                    ) : (
                      "Connect TwelveLabs API Key"
                    )}
                  </Button>
                </div>

                {/* Text input */}
                <div className="relative">
                  <textarea
                    placeholder="Describe what you want to research from your video..."
                    className="w-full min-h-[120px] p-4 text-lg border-0 resize-none focus:outline-none placeholder-gray-400 bg-transparent"
                    rows={4}
                    value={prompt}
                    onChange={(e) => setPrompt(e.target.value)}
                  />
                </div>

                {/* Bottom toolbar */}
                <div className="flex items-center justify-between pt-4 border-t border-gray-100">
                  <div className="flex items-center space-x-3">
                    <Button variant="outline" size="sm" className="text-gray-500 hover:text-gray-700 hover:bg-gray-50">
                      <Video className="w-4 h-4 mr-2" />
                      Upload Video
                    </Button>
                    <span className="text-xs text-gray-400">MP4, MOV, AVI up to 500MB</span>
                  </div>
                  <Button
                    onClick={handleStartResearch}
                    disabled={!canStartResearch || isResearching}
                    className="bg-gray-900 hover:bg-gray-800 text-white px-4 h-8 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isResearching ? (
                      <>
                        <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                        Researching...
                      </>
                    ) : (
                      "Start Research"
                    )}
                  </Button>
                </div>
              </div>
            </Card>
          </div>

          {/* Chat interface when research has started */}
          {researchStarted && (
            <div className="max-w-4xl mx-auto">
              {/* User Message */}
              <div className="flex justify-end mb-8">
                <div className="bg-gray-900 text-white px-4 py-2 rounded-2xl rounded-tr-sm max-w-xs">
                  <p className="text-sm">{prompt}</p>
                </div>
              </div>

              {/* Citation Sources Display - Only Show When Real Sources Exist */}
              {sources.length > 0 && sources.some(source => source.isReal) && (
                <div className="mb-8">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Research Sources</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {sources.filter(source => source.isReal).map((source, index) => (
                      <div key={index} className="bg-white border border-gray-200 rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow">
                        <div className="flex items-start space-x-3">
                          <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0">
                            <svg className="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                            </svg>
                          </div>
                          <div className="flex-1 min-w-0">
                            <a 
                              href={source.url} 
                              target="_blank" 
                              rel="noopener noreferrer"
                              className="text-sm font-medium text-gray-900 hover:text-blue-600 transition-colors line-clamp-2"
                            >
                              {source.title}
                            </a>
                            <p className="text-xs text-gray-600 mt-1 line-clamp-2">{source.description}</p>
                            <span className="inline-block bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs mt-2">
                              Real Source
                            </span>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* AI Response */}
              <div className="mb-8">
                <div className="text-gray-900 space-y-4">
                  <p>
                    Analysis is going on for the provided video. I'll research your query and provide you with comprehensive insights.
                  </p>

                  {/* Simple Progress Bar - Exactly like reference image */}
                  <div className="bg-white border border-gray-200 rounded-lg p-6 shadow-sm">
                    <div className="flex items-center justify-between mb-3">
                      <span className="text-lg font-medium text-gray-900">
                        {(() => {
                          const currentStep = researchSteps.find(step => step.status === 'in-progress');
                          const completedSteps = researchSteps.filter(step => step.status === 'completed').length;
                          const totalSteps = researchSteps.length;
                          
                          if (completedSteps === totalSteps) {
                            return 'Research completed! 🎉';
                          } else if (currentStep) {
                            return currentStep.message;
                          } else if (completedSteps > 0) {
                            return `Step ${completedSteps + 1} of ${totalSteps}`;
                          } else {
                            return 'Starting research...';
                          }
                        })()}
                      </span>
                      {/* Stop/Pause button like in reference image */}
                      <div className="w-6 h-6 bg-gray-300 rounded-full flex items-center justify-center">
                        <div className="w-2 h-2 bg-gray-900 rounded-sm"></div>
          </div>
        </div>

                    {/* Simple progress bar */}
                    <div className="w-full bg-gray-200 rounded-full h-2 relative overflow-hidden">
                      <div 
                        className="h-2 bg-gray-600 rounded-full transition-all duration-500 ease-out"
                        style={{
                          width: `${(() => {
                            const completedSteps = researchSteps.filter(step => step.status === 'completed').length;
                            const inProgressSteps = researchSteps.filter(step => step.status === 'in-progress').length;
                            const totalSteps = researchSteps.length;
                            
                            if (completedSteps === totalSteps) {
                              return 100;
                            } else if (inProgressSteps > 0) {
                              return ((completedSteps + 0.5) / totalSteps) * 100;
                            } else {
                              return (completedSteps / totalSteps) * 100;
                            }
                          })()}%`
                        }}
                      />
                    </div>
                  </div>

                  {/* Streaming Content */}
                  {streamingContent && (
                    <div className="bg-gray-50 border border-gray-200 rounded-lg p-6">
                      <div className="prose prose-sm max-w-none">
                        <ReactMarkdown remarkPlugins={[remarkGfm]}>
                          {streamingContent}
                        </ReactMarkdown>
                      </div>
                    </div>
                  )}
                </div>
              </div>

              {/* Activity Sidebar - Always Visible During Research */}
              <div className="fixed right-0 top-0 h-full w-80 border-l border-gray-200 bg-gray-50 shadow-lg">
                <div className="p-6">
                  <div className="flex items-center justify-between mb-6">
                    <h3 className="text-lg font-semibold text-gray-900">Research Mode</h3>
                    <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                  </div>

                  {/* Tabs */}
                  <div className="flex space-x-1 mb-6">
                    <button
                      onClick={() => setActiveTab('activity')}
                      className={`px-3 py-2 text-sm font-medium rounded-md transition-colors ${
                        activeTab === 'activity' 
                          ? 'bg-gray-900 text-white' 
                          : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
                      }`}
                    >
                      Activity
                    </button>
                    <button
                      onClick={() => setActiveTab('sources')}
                      className={`px-3 py-2 text-sm font-medium rounded-md transition-colors ${
                        activeTab === 'sources' 
                          ? 'bg-gray-900 text-white' 
                          : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
                      }`}
              >
                      Sources
                    </button>
                  </div>

                  {/* Tab Content */}
                  {activeTab === 'activity' ? (
                    <div className="space-y-4">
                      {activityLogs.map((log, index) => (
                        <div key={index} className="flex items-start space-x-3">
                          <div className={`w-2 h-2 rounded-full mt-2 flex-shrink-0 ${
                            log.type === 'info' ? 'bg-blue-500' :
                            log.type === 'progress' ? 'bg-yellow-500' :
                            log.type === 'complete' ? 'bg-green-500' :
                            'bg-red-500'
                          }`} />
                          <div className="flex-1 min-w-0">
                            <p className="text-sm text-gray-700">{log.message}</p>
                            <p className="text-xs text-gray-500 mt-1">
                              {log.timestamp.toLocaleTimeString()}
                            </p>
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="space-y-4">
                      {sources.length > 0 && sources.some(source => source.isReal) ? (
                        sources.filter(source => source.isReal).map((source, index) => (
                          <div key={index} className="bg-white border border-gray-200 rounded-lg p-3">
                            <a 
                              href={source.url} 
                              target="_blank" 
                              rel="noopener noreferrer"
                              className="text-sm font-medium text-gray-900 hover:text-blue-600 transition-colors line-clamp-2 block"
                            >
                              {source.title}
                            </a>
                            <p className="text-xs text-gray-600 mt-1 line-clamp-2">{source.description}</p>
                          </div>
                        ))
                      ) : (
                        <p className="text-sm text-gray-500 text-center py-4">No sources available yet</p>
                )}
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}
        </div>
      </main>

      {/* Footer */}
      <footer className="border-t border-gray-100 py-8 mt-16">
        <div className="container mx-auto px-6">
          <div className="flex flex-col md:flex-row items-center justify-between">
            <div className="flex items-center space-x-2 mb-4 md:mb-0">
              <span className="text-gray-500 text-sm">Powered by</span>
              <span className="font-semibold text-gray-900">TwelveLabs</span>
            </div>
            <div className="flex items-center space-x-6 text-sm text-gray-500">
              <a href="#" className="hover:text-gray-700">Privacy</a>
              <a href="#" className="hover:text-gray-700">Terms</a>
              <a href="#" className="hover:text-gray-700">Support</a>
            </div>
          </div>
        </div>
      </footer>

      {/* API Key Modal */}
      <Dialog open={isApiModalOpen} onOpenChange={setIsApiModalOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Connect TwelveLabs API</DialogTitle>
            <DialogDescription>
              Enter your TwelveLabs API key to start analyzing videos and conducting research.
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div className="space-y-2">
              <label htmlFor="api-key" className="text-sm font-medium text-gray-700">
                API Key
              </label>
              <Input
                id="api-key"
                type="password"
                placeholder="Enter your TwelveLabs API key"
                value={apiKey}
                onChange={(e) => setApiKey(e.target.value)}
                className="w-full"
              />
            </div>
            <div className="flex justify-end space-x-2">
              <Button
                variant="outline"
                onClick={() => setIsApiModalOpen(false)}
              >
                Cancel
              </Button>
              <Button
                onClick={handleConnect}
                disabled={isConnecting || !apiKey.trim()}
                className="bg-gray-900 hover:bg-gray-800 text-white"
              >
                {isConnecting ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    Connecting...
                  </>
                ) : (
                  "Connect"
                )}
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Coming Soon Modal */}
      <Dialog open={isComingSoonOpen} onOpenChange={setIsComingSoonOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Coming Soon!</DialogTitle>
            <DialogDescription>
              This feature is currently under development and will be available soon.
            </DialogDescription>
          </DialogHeader>
          <div className="flex justify-end">
            <Button onClick={() => setIsComingSoonOpen(false)}>
              Got it
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  )
}
